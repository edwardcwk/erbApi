var cli = require('../cli'),
    fs = require('fs'),
    path = require('path'),
    request = require('request'), 
    remote = require('../remotecommon'), 
    endpoints = require('../endpoints'); 

var _CMD = 'logs'; 

function LogEntry(obj, set_label) {
    this.ts = obj.time;
    this.time = obj.time;
    this.text = obj.log;
    this.label = set_label;
    this.stream = obj.stream;
    this.is_error = this.stream == "stderr";

    this.formatdate = function () {
        this.ts = this.ts.replace('T', ' ');
        this.ts = this.ts.replace("Z", "");
        var i = this.ts.lastIndexOf('.');
        if (i == -1)
            return;

        this.ts = this.ts.substring(0, i);
    }

    this.formatdate();

    this.ShouldAggregate = function (o) {
        return this.ts == o.ts
        && this.stream == o.stream
        && this.label == o.label;
    }

    this.formatLog = function(log) {
        if (log.length > 8192)
            log = log.substring(0, 8192) + '... TRUNCATED'

        //   if (prefix && prefix.startsWith("DB")) {
        var oo = log.indexOf('{');
        var eo = 0;
        if (oo > -1) {
            var str = [];

            while (oo > -1) {
                str.push(log.substring(0, oo));
                var c = 1, eo = oo;
                for (++oo; oo < log.length; oo++) {
                    if (log.charAt(oo) == '"') {
                        for (++oo; oo < log.length; oo++) {
                            if (log.charAt(oo) == '"' && log.charAt(oo - 1) != '\\')
                                break;
                        }
                    }
                    else if (log.charAt(oo) == '}') {
                        --c;
                        if (c == 0)
                            break;
                    }
                    else if (log.charAt(oo) == '{')
                        ++c;
                }

                if (c == 0) {
                    var json = log.substring(eo, oo + 1);
                    var obj = eval(['(', json, ')'].join(""));
                    if (obj != null) {
                        str.push("\n");
                        str.push(JSON.stringify(obj, null, 2));
                        str.push("\n");
                    }
                    else
                        break;

                    log = log.substring(oo + 1);
                    oo = log.indexOf('{');
                }
                else
                    break;
            }

            if (oo == -1) {
                str.push(log);
                log = str.join("");
            }
        }

        return log;
    }

    this.PrintLine = function (prefix) {
        if (this.text.charAt(this.text.length - 1) == '\n')
            cli.cout(prefix + this.formatLog(this.text));
        else
            console.log(prefix + this.formatLog(this.text)); 
    }

    this.PrintError = function (prefix) {
        if (this.text.charAt(this.text.length - 1) == '\n')
            cli.cout([cli.colors.BRIGHT_RED, prefix, this.formatLog(this.text), cli.colors.RESET].join(""));
        else
            console.log([cli.colors.BRIGHT_RED, prefix, this.formatLog(this.text), cli.colors.RESET].join(""));
    }
}

function Print(p_set) {
    console.log(cli.colors.BRIGHT_BLACK + p_set[0].ts + ' -- ' + p_set[0].label + cli.colors.RESET);
    var prefix = '    ';

    if (p_set[0].is_error) {
        p_set[0].PrintError(prefix);

        for (var i = 1; i < p_set.length; i++)
            p_set[i].PrintError(prefix);
    }
    else {
        p_set[0].PrintLine(prefix);

        for (var i = 1; i < p_set.length; i++)
            p_set[i].PrintLine(prefix);
    }

    console.log(''); 
}

function Help() {
    var str = [];
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Usage:   nc logs [OPTIONS]');
    str.push(cli.colors.RESET);
    str.push('\n\n');
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Options:\n');
    str.push(cli.colors.RESET);
    str.push('  -i        Specify the name of your application\n');
    str.push('  --tail    Specify an integer value indicating the maximum lines to print\n');
    str.push('\n')
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Examples:\n');
    str.push(cli.colors.RESET);
    str.push('  nc logs -i hello-world-app\n');
    str.push('  nc logs -i hello-world-app --tail 20\n');
    console.log(str.join(""));
}

function PrintLogs(obj, print_num) {
    var log_entries = [];
    for (var s in obj) {
        var l_set = obj[s];

        for (var i = 0; i < l_set.length; i++) {
            log_entries.push(new LogEntry(l_set[i], s));
        }
    }

    console.log('');

    if (log_entries.length == 0) {
        console.log('Your container(s) have yet to output any logs');
        console.log('');
        return;
    }

    log_entries.sort(function (a, b) {
        if (a.ts == b.ts) {
            if (a.label == b.label) return 0;
            else if (a.label < b.label) return -1;
            else return 1;
        }
        else if (a.ts < b.ts) return -1;
        else return 1;
    });

    if (log_entries.length > print_num)
        log_entries.splice(0, log_entries.length - print_num);

    for (var i = 0; i < log_entries.length && print_num > 0;) {
        var log = log_entries[i], p_set = [log];

        for (++i, --print_num; print_num > 0 && i < log_entries.length; i++, --print_num) {
            if (log_entries[i].ShouldAggregate(log)) {
                p_set.push(log_entries[i]);
            }
            else {
                break;
            }
        }

        Print(p_set);
    }

    console.log('');
}

function RequestLogs(_url, query_str, print_num) {
    request({
        url: _url,
        qs: query_str,
        method: 'GET',
        headers: remote.getRequestHeaders()
    }, function (err, res, body) {
        if ((res && res.statusCode != 200) || !res) {
            if (!err)
                err = cli.errDef.remoteNon200(res.statusCode);
        }

        if (err || !body) {
            cli.writeerror(err);
            return;
        }

        PrintLogs(JSON.parse(body), print_num);
    });
}

function HandleRequest(args) {
    if (cli.requestingHelp(args)) {
        Help();
        return; 
    }

    if (!cli.isAuthenticated())
        return;

    var application_name = null, print_num = 100, is_db_logs = false;
    if (args && args.length > 0) {
        for (var i = 0, v; i < args.length; i += 2) {
            switch (args[i]) {
                case '-i':
                    application_name = cli.nextArg(args, i);
                    break;
                case '--tail':
                    print_num = cli.nextIntArg(args, i);
                    break;
                default:
                    cli.errors.unknownSwitch(args[i], _CMD);
                    process.exit(1);
                    return;
            }
        }
    }

    if (application_name == null) {
        application_name = cli.resolveAppName(process.cwd());

        if (application_name == null || application_name == "") {
            cli.errors.expectsName(_CMD);
            return;
        }
    }

    remote.GetBridgeRoute(application_name, function (cloud_env) {
        var query_str = null;
        
        var _url = endpoints.logs(cloud_env);
        cli.debug(_url);

        if (cloud_env == endpoints.envBM) {
            RequestLogs(_url, query_str = {
                cname: application_name
            }, print_num); 
        }
        else {
            remote.resolveAppId(application_name, null, _CMD, function (id) {
                RequestLogs(_url, {
                    appid: id
                }, print_num);
            }); 
        }
    }); 
}

module.exports = HandleRequest; 