var endpoints = require('../endpoints'),
    request = require('request'),
    remote = require('../remotecommon'),
    path = require('path'),
    fs = require('fs'),
    cli = require('../cli'),
    _CMD = 'exec';

function Help() {
    var str = [];
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Usage:   nc exec [application name] [OPTIONS]');
    str.push(cli.colors.RESET);
    str.push('\n\n');
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Options:\n');
    str.push(cli.colors.RESET);
    str.push('  -b    Specify the relative or absolute path to the bash file (utf8) to be executed in the container\n');
    str.push('  -c    The command to execute in the container\n');
    str.push('  -e    Specify an environment variable - Format: -e var1=value\n');
    str.push('  -w    Change the default working directory which will always be your application root. ie: [/bundle]\n');
    str.push('  -cid  If you have multiple containers specify the id of the container to execute the command in\n');
    str.push('        The Id starts at 1 and ends with the total number of containers you have\n');
    str.push('        Eg: nc exec pyramid-app -c "echo meow" -cid 2\n');
    str.push('\n')
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Examples:\n');
    str.push(cli.colors.RESET);
    str.push('  nc exec pyramid-app -c "cat /bundle/temp.log"\n');
    str.push('  nc exec pyramid-app -i mybashfile.sh\n');
    console.log(str.join(""));
}

module.exports = function (args) {
    if (cli.requestingHelp(args)) {
        Help();
        return;
    }

    var application_name = args[0], env_vars = {}, id = cli.randomId(), req = { id: id, cname: application_name, env: env_vars };
    var i = 1, c_exec = null, exec_bash = null, work_dir = null;
    for (; i < args.length; i += 2) {
        switch (args[i]) {
            case '-c':
                c_exec = cli.nextArg(args, i);

                if (!(null == exec_bash || "" == exec_bash)) {
                    cli.writeerror('Cannot specify the -c parameter when the -b parameter has already been specified');
                    process.exit(1);
                }

                req['command'] = c_exec;
                break;
            case '-b':
                if (!(null == c_exec || "" == c_exec)) {
                    cli.writeerror('Cannot specify the -b parameter when the -c parameter has already been specified');
                    process.exit(1);
                }

                exec_bash = cli.nextArg(args, i);

                if (!((exec_bash.length > 1 && exec_bash.charAt(0) == '/') || (exec_bash.length > 2 && exec_bash.charAt(1) == ':'))) {
                    exec_bash = path.join(process.cwd(), exec_bash); 
                }

                if (fs.lstatSync(exec_bash).isSymbolicLink()) {
                    exec_bash = fs.realpathSync(exec_bash);
                }
                else if (!fs.existsSync(exec_bash)) {
                    cli.writeerror('The specified bash file ' + cli.writevariable(exec_bash)  + ' does not exist')
                    process.exit(1);
                }

                if (fs.lstatSync(exec_bash).isDirectory()) {
                    cli.writeerror(cli.writevariable(exec_bash) + ' Is not a file but a directory');
                    process.exit(1);
                }

                req['script'] = fs.readFileSync(exec_bash, { encoding: 'utf8' });
                break;
            case '-e':
                {
                    var env = cl.nextArg(args, i);
                    var oo = env.indexOf('=');
                    if(oo == -1){
                        return; 
                    }

                    var var_name = env.substring(0, oo), var_value = env.substring(oo + 1);

                    if (env_vars.hasOwnProperty(var_name))
                        cli.writewarn('Duplicate environment variable ' + cli.writevariable(var_name) + ' - will override');

                    env_vars[var_name] = var_value;
                }
                break;
                /*
            case '-w':
                work_dir = cli.nextArg(args, i);
                if (work_dir.chartAt(0) != '/') {
                    cli.writeerror('Working directory must be an absolute path'); 
                    process.exit(1);
                }
                req['workdir'] = work_dir;
                break;
                **/
            case '-cid':
                if (req.hasOwnProperty('cid')) {
                    cli.writeerror('A single instance of the -cid parameter is expected');
                    process.exit(1);
                }
                req['cid'] = cli.nextIntArg(args, i); 
                break; 
            default:
                cli.errors.unknownSwitch(args[i], _CMD);
                process.exit(1);
                break; 
        }
    }

    remote.GetBridgeRoute(application_name, function (cloud_env) {
        NC_CLOUD_ENV = cloud_env;
        cli.debug('Application environment: ' + cloud_env);

        console.log('');

        request.post({
            url: endpoints.exec(cloud_env),
            headers: remote.getRequestHeaders(),
            body: JSON.stringify(req),
        }, function (err, res, body) {
            if (err) {
                cli.writeerror(err);
                process.exit(1);
            }
        });

        var prog = new status(id, application_name, NC_CLOUD_ENV);
        prog.with_upload_progress_indicator = false;
        prog.startPolling();

    });
}