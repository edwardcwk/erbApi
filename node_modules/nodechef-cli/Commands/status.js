var request = require('request'),
    endpoints = require('../endpoints'),
    cli = require('../cli'), 
    remote = require('../remotecommon'), 
    blessed = require('blessed');

function Help() {
    var str = [];
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Usage:   nc status [OPTIONS]');
    str.push(cli.colors.RESET);
    str.push('\n\n');
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Options:\n');
    str.push(cli.colors.RESET);
    str.push('  -i    Specify the name of your application\n');
    str.push('\n')
    str.push(cli.colors.BRIGHT_CYAN);
    str.push('Examples:\n');
    str.push(cli.colors.RESET);
    str.push('  nc status -i hello-world-app\n');
    console.log(str.join(""));
}

var application_name = null, body = null, screen, NC_CLOUD_ENV, request_url = null;

function GET(cb) {
    var query_str = {
        cname: application_name,
        name: application_name
    };

    if (request_url == null) {
        request_url = endpoints.appstatus(NC_CLOUD_ENV); 
    }

    request({
        url: request_url,
        qs: query_str,
        gzip: true,
        method: 'GET',
        headers: remote.getRequestHeaders()
    }, function (err, res, body) {
        if ((res && res.statusCode != 200) || !res) {
            if (!err)
                err = cli.errDef.remoteNon200(res.statusCode);
        }

        if (err || !body) {
            cli.writeerror(err);
            return process.exit(1); 
        }
        
        var obj = eval(['(', body, ')'].join(""));
        cb(obj);
    });
}

function writeCell(e, padding) {
    if (e.length > padding) {
        return e.substring(0, padding);
    }

    if (e.length < padding) {
        var num_spaces = padding - e.length;
        var set = new Array(num_spaces);
        for (var i = 0; i < num_spaces; i++)
            set[i] = ' ';

        return e + set.join("");
    }

}

function SetHeaders() {
    body.setLine(0, cli.colors.BRIGHT_CYAN + 'Press [ESC] or [q] to exit' + cli.colors.RESET);
    var lines = [];
    lines.push([cli.colors.BRIGHT_MAGENTA, writeCell("NAME", 18), writeCell("STATUS", 16), writeCell("% CPU", 10), writeCell("% MEM", 32), writeCell("REQ/SEC", 10), cli.colors.RESET].join(""));
    return lines;
}

function onDataCBVps(obj) {

    var set = obj[0].instances;

    if (set.length == 0) {
        cli.writeerror('Status for application ' + cli.writevariable(application_name) + ' returned an empty result');
        return process.exit(1);
    }

    var lines = SetHeaders(); 

    for (var i = 0, exit_state = false; i < set.length; i++) {
        var row = [];
        var inst = set[i];

        if (exit_state = (!inst.status.startsWith('Ru') && !inst.status.startsWith("Up"))) {
            row.push(cli.colors.BRIGHT_RED);
        }

        row.push(writeCell(inst.name, 18));
        row.push(writeCell(inst.status, 16));
        row.push(writeCell(inst.cpuUsage, 10));
        row.push(writeCell(inst.memoryUsage, 32));
        if (inst.rps) row.push(writeCell(inst.rps, 10));

        if (exit_state) {
            row.push(cli.colors.RESET);
        }

        lines.push(row.join("")); 
    }

    var c = 1;
    body.setLine(c++, '');

    for (var i = 0; i < lines.length; i++) {
        body.setLine(c++, lines[i]);
    }

    screen.render();

    setTimeout(function () {
        GET(onDataCBVps);
    }, 2000);
}

function onDataCB(obj) {

    var set = obj.data;

    var lines = SetHeaders();

    var db_conn_str = null, app_url;

    for (var i = 0, a_count = 0, oo, is_exited; i < set.length; i++) {
        var node = set[i];

        var str = [];

        if (node.href) {
            ++a_count;
            app_url = node.href;
            var stat = node.stat;
            oo = stat.status.indexOf('Exited (');
            if (is_exited = (oo > -1)) {
                oo += 'Exited ('.length;
                oo = stat.status.indexOf(')', oo);
                if (oo > -1) {
                    stat.status = stat.status.substring(0, ++oo); 
                }

                str.push(cli.colors.BRIGHT_RED);
            }

            str.push(writeCell('App' + a_count.toString(), 18));
            str.push(writeCell(stat.status, 16));
            str.push(writeCell(stat.cpu, 10));
            str.push(writeCell(stat.memory, 32));
            str.push(writeCell(node.rps, 10));

            if (is_exited)
                str.push(cli.colors.RESET); 
        }
        else {
            if (node.connect)
                db_conn_str = node.connect;

            var stat = node.stat;
            oo = node.id.lastIndexOf(application_name);

            str.push(writeCell(node.id.substring(0, oo - 1), 18)); 
            str.push(writeCell(stat.status, 16));
            str.push(writeCell(stat.cpu, 10));
            str.push(writeCell(stat.memory, 32));
            str.push(writeCell(stat.rps, 10)); 
        }
        
        lines.push(str.join("")); 
    }

    var c = 1;
    body.setLine(c++, '');

    if (app_url != null) {
        body.setLine(c++, cli.colors.BRIGHT_YELLOW + writeCell('Endpoint:', 15) + cli.colors.RESET + app_url);
    }

    if (db_conn_str != null) {
        body.setLine(c++, cli.colors.BRIGHT_YELLOW + writeCell('DB Endpoint:', 15) + cli.colors.RESET + db_conn_str);
    }

    body.setLine(c++, '');

    for (var i = 0; i < lines.length; i++) {
        body.setLine(c++, lines[i]);
    }

    screen.render();
    
    setTimeout(function () {
        GET(onDataCB);
    }, 2000); 
}

module.exports = function (args) {
    if (cli.requestingHelp(args)) {
        Help();
        return;
    }

    if (args && args.length > 0) {
        for (var i = 0, v; i < args.length; i += 2) {
            switch (args[i]) {
                case '-i':
                    application_name = cli.nextArg(args, i);
                    break;
                default:
                    cli.errors.unknownSwitch(args[i], _CMD);
                    process.exit(1);
                    return;
            }
        }
    }

    if (application_name == null) {
        application_name = cli.resolveAppName(process.cwd());

        if (application_name == null || application_name == "") {
            cli.errors.expectsName(_CMD);
            return;
        }
    }

    remote.GetBridgeRoute(application_name, function (cloud_env) {
        NC_CLOUD_ENV = cloud_env; 
        screen = blessed.screen();
        body = blessed.box({
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            tags: true
        });

        screen.append(body);

        screen.key(['escape', 'q'], function (ch, key) {
            return process.exit(0);
        });
        if (cloud_env == endpoints.envBM) {
            GET(onDataCB);
        }
        else {
            GET(onDataCBVps);
        }
    }); 
}