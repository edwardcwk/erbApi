var request = require('request'), 
    endpoints = require('./endpoints'),
    remote = require('./remotecommon'), 
    cli = require('./cli');

function DeploymentStatus(deployment_id, application_name, cloud_env, callback) {
    this.id = deployment_id;
    this.queryStr = { id: this.id, cname: application_name };
    this.cb = callback;

    cli.debug('Request query string: ' + JSON.stringify(this.queryStr));

    this.with_upload_progress_indicator = true;
    this.url = endpoints.status(cloud_env);
    this.error_count = 0;
    this.eof = false;
    this.on_uploader_progress = false;
    this.main_up_progress_done = false;
    var self = this;

    this.updateProgressBar = function (percent_complete) {
        if (percent_complete == 1 && !this.on_uploader_progress)
            return;

        if (!this.on_uploader_progress)
            console.log(''); 

        this.on_uploader_progress = true; 

        var str = [(percent_complete == 1 ? cli.colors.BRIGHT_GREEN : cli.colors.BRIGHT_CYAN), 'Upload: ['];
        var len = 32, plen = (len * percent_complete).toFixed(0), i = 0;

        for (; i < plen; str.push('='), i++);

        for (; i < len; str.push(' '), ++i);

        str.push(']');
        str.push(cli.colors.RESET); 

        if (process.stdout.isTTY) {
            process.stdout.clearLine();
            process.stdout.cursorTo(0);
        }

        process.stdout.write(str.join(""));

        if (percent_complete == 1) {
            console.log(''); 
            this.on_uploader_progress = false; 
        }
    }

    this.ShowUploadProgressIndicator = function (obj) {
        if (!self.with_upload_progress_indicator)
            return;

        if (!self.main_up_progress_done) {
            if (obj.dwn != '1') {
                var uread = parseInt(obj.ur), ulength = parseInt(obj.ul);
                self.updateProgressBar((uread / ulength))
            }
            else if (obj.dwn == '1') {
                if (self.on_uploader_progress)
                    self.updateProgressBar(1);

                self.main_up_progress_done = true;
            }
        }
        else if (obj.up) {
            self.updateProgressBar(parseInt(obj.pcmp) / 100);
        }
    }
    
    this.PrintStatus = function (obj) {

        if (obj.err.length > 0) {
            var i = obj.err.indexOf('{');
            if (i > -1) {
                var err = obj.err.substring(i);

                try {
                    var node = JSON.parse(err);
                    err = node.err.split("\\n");
                    for (var i = 0; i < err.length; i++)
                        cli.errorline(err[i].replace(/\\/g, ''));
                    process.exit(1);
                }
                catch (e) {

                }
            }

            cli.writeerror(obj.err);
            process.exit(1); 
        }

        var upstate = self.on_uploader_progress;

        if (upstate) {
            this.ShowUploadProgressIndicator(obj);
        }

        if (obj.logs && obj.logs.length > 0) {
            for (var i = 0; i < obj.logs.length; i++) {
                if (obj.logs[i] == 'Done') {
                    this.eof = true;
                    console.log('');

                    if (self.cb != null) {
                        self.cb(); 
                    }
                    else {
                        process.exit(0);
                    }

                    return; 
                }

                var log_entry = obj.logs[i];

                if (log_entry.charAt(log_entry.length - 1) == '\n')
                    cli.cout(log_entry);
                else
                    console.log(log_entry); 
            }
        }

        if (!upstate) {
            this.ShowUploadProgressIndicator(obj);
        }

        cli.debug('Poll for deployment status after 2 seconds');

        setTimeout(function () {
            self.Dispatch(); 
        }, 2000); 
    }

    this.Dispatch = function () {
        request({
            url: this.url,
            qs: this.queryStr,
            method: 'GET',
            headers: remote.getRequestHeaders()
        }, function (err, res, body) {
            if ((res && res.statusCode != 200) || !res) {
                if (!err)
                    err = cli.errDef.remoteNon200(res.statusCode); 
            }

            if (err || !body) {
                ++self.error_count;

                cli.debug('Deployment status error from remote: ' + err);

                if (self.error_count == 15) {
                    cli.writeerror(err); 
					process.exit(1);
                    return; 
                }

                self.startPolling(); 
                return; 
            }

            self.error_count = 0; 
            
            //console.log('Remote response: ' + JSON.stringify(body));

            var obj = JSON.parse(body);
            self.PrintStatus(obj);
        });
    }

    this.startPolling = function () {

        cli.debug('Poll for deployment status after 3 seconds');

        setTimeout(function () {
            self.Dispatch(); 
        }, 3000); 
    }
}

module.exports = DeploymentStatus; 